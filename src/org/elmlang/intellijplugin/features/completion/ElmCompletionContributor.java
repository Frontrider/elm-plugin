package org.elmlang.intellijplugin.features.completion;

import com.intellij.codeInsight.completion.*;
import com.intellij.patterns.PlatformPatterns;
import org.elmlang.intellijplugin.ElmLanguage;

public class ElmCompletionContributor extends CompletionContributor {
    public ElmCompletionContributor() {
        extend(
                CompletionType.BASIC,
                PlatformPatterns
                        .psiElement()
                        .withLanguage(ElmLanguage.INSTANCE),
                getProvider()
        );
    }

    private static CompletionProvider<CompletionParameters> getProvider() {
        return new FixedWordsProvider(
                // keywords
                "module",
                "where",
                "import",
                "as",
                "exposing",
                "type",
                "alias",
                "case",
                "of",
                "let",
                "in",
                "infix",
                "infixl",
                "infixr",

                // some values from the core library
                "Address",
                "All",
                "Array",
                "AtMost",
                "Bool",
                "Char",
                "Debug",
                "Dict",
                "Err",
                "Float",
                "HowMany",
                "Int",
                "Just",
                "KeyCode",
                "List",
                "Mailbox",
                "Match",
                "Maybe",
                "Message",
                "Nothing",
                "Ok",
                "Order",
                "Regex",
                "Result",
                "Set",
                "Signal",
                "String",
                "Task",
                "ThreadID",
                "abs",
                "acos",
                "all",
                "always",
                "andMap",
                "andThen",
                "any",
                "append",
                "asin",
                "atan",
                "atan2",
                "caseInsensitive",
                "ceiling",
                "clamp",
                "compare",
                "concat",
                "concatMap",
                "cons",
                "constant",
                "contains",
                "cos",
                "crash",
                "curry",
                "degrees",
                "diff",
                "drop",
                "dropLeft",
                "dropRepeats",
                "dropRight",
                "empty",
                "endsWith",
                "escape",
                "fail",
                "filter",
                "filterMap",
                "find",
                "flip",
                "floor",
                "foldl",
                "foldp",
                "foldr",
                "formatError",
                "forwardTo",
                "fromChar",
                "fromCode",
                "fromList",
                "fromMaybe",
                "fromPolar",
                "fromResult",
                "fst",
                "get",
                "head",
                "identity",
                "indexedMap",
                "indexes",
                "indices",
                "initialize",
                "insert",
                "intersect",
                "intersperse",
                "isDigit",
                "isEmpty",
                "isHexDigit",
                "isInfinite",
                "isLower",
                "isNaN",
                "isOctDigit",
                "isUpper",
                "join",
                "keys",
                "left",
                "length",
                "lines",
                "log",
                "logBase",
                "mailbox",
                "map",
                "map2",
                "map3",
                "map4",
                "map5",
                "mapError",
                "max",
                "maximum",
                "member",
                "merge",
                "mergeMany",
                "message",
                "min",
                "minimum",
                "module",
                "negate",
                "not",
                "onError",
                "oneOf",
                "pad",
                "padLeft",
                "padRight",
                "partition",
                "pi",
                "product",
                "push",
                "radians",
                "regex",
                "rem",
                "remove",
                "repeat",
                "replace",
                "reverse",
                "right",
                "round",
                "sampleOn",
                "scanl",
                "send",
                "sequence",
                "set",
                "sin",
                "singleton",
                "size",
                "sleep",
                "slice",
                "snd",
                "sort",
                "sortBy",
                "sortWith",
                "spawn",
                "split",
                "sqrt",
                "startsWith",
                "succeed",
                "sum",
                "tail",
                "take",
                "tan",
                "toCode",
                "toFloat",
                "toIndexedList",
                "toInt",
                "toList",
                "toLocaleLower",
                "toLocaleUpper",
                "toLower",
                "toMaybe",
                "toPolar",
                "toResult",
                "toString",
                "toUpper",
                "trace",
                "trim",
                "trimLeft",
                "trimRight",
                "truncate",
                "turns",
                "uncons",
                "uncurry",
                "union",
                "unzip",
                "update",
                "values",
                "watch",
                "watchSummary",
                "where",
                "withDefault",
                "words",
                "xor"
        );
    }
}
