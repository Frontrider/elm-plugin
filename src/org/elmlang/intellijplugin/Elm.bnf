{
  parserClass="org.elmlang.intellijplugin.parser.ElmParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Elm"
  psiImplClassSuffix="Impl"
  psiPackage="org.elmlang.intellijplugin.psi"
  psiImplPackage="org.elmlang.intellijplugin.psi.impl"

  elementTypeHolderClass="org.elmlang.intellijplugin.psi.ElmTypes"
  elementTypeClass="org.elmlang.intellijplugin.psi.ElmElementType"
  tokenTypeClass="org.elmlang.intellijplugin.psi.ElmTokenType"
}

// docs:
// https://github.com/JetBrains/Grammar-Kit
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md

elmFile ::= blank* [module_declaration] import_item* declaration_item*

private declaration_item ::= (declaration|blank)

private import_item ::= (import_clause|blank)

blank ::= WHITE_SPACE|INDENTATION|FRESH_LINE|comment

// module

module_declaration ::= MODULE module_name [exposed_values] WHERE

module_name ::= MODULE_PATH | UPPER_CASE_IDENTIFIER

exposed_values ::= LEFT_PARENTHESIS (DOUBLE_DOT|list_of_values) RIGHT_PARENTHESIS

list_of_values ::= exposed_value (COMMA exposed_value)*

exposed_value ::= LOWER_CASE_IDENTIRIER | (UPPER_CASE_IDENTIFIER[exposed_union_constructors])

exposed_union_constructors ::= LEFT_PARENTHESIS (DOUBLE_DOT|list_of_union_constructors) RIGHT_PARENTHESIS

list_of_union_constructors ::= UPPER_CASE_IDENTIFIER (COMMA UPPER_CASE_IDENTIFIER)*

// imports

import_clause ::= IMPORT module_name [as_clause] [exposing_clause]

as_clause ::= AS UPPER_CASE_IDENTIFIER

exposing_clause ::= EXPOSING exposed_values

// comments

comment ::= LINE_COMMENT|level_comment

level_comment ::= START_COMMENT COMMENT_CONTENT* END_COMMENT

// declarations

declaration ::= value_declaration

value_declaration ::= value_declaration_left EQ expression { pin = 1 recoverWhile="declaration_recover" }

value_declaration_left ::= LOWER_CASE_IDENTIRIER+

expression ::= expression_without_operator OPERATOR expression|expression_without_operator|LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

expression_without_operator ::= literal|LOWER_CASE_IDENTIRIER

literal ::= STRING_LITERAL|NUMBER_LITERAL|CHAR_LITERAL

declaration_recover ::= !(FRESH_LINE)